1. Create a job that calculates pi to 2000 decimal points using the container with the image named perl and the following entry point to the container:

 ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
Once the job has completed, save the result to your home directory in a file called pi.result.txt.

  ANSWER : 
   user@arshadalisyed1:~$ cat pi.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-result
spec:
  template:
    spec:
      containers:
      - name: pi-result
        image: perl
        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never
  backoffLimit: 4
user@arshadalisyed1:~$


    kubectl logs job/pi-result > pi-result.txt
    cat pi-result
       3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275898


2. Create yaml for a pod that uses the nginx image and listens on port 80. The pod should have the name nginx-pod and be labeled with app: nginx. Save the yaml to your home directory as nginx-pod.yaml and start the pod.

user@arshadalisyed1:~$ cat nginx-pod-1.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-exam
  labels:
    app: nginx
spec:
  containers:
    - name: nginx-exam
      image: nginx
      ports:
      - containerPort: 80
user@arshadalisyed1:~$



3..Create yaml for a deployment of two replicas of nginx, listening on the container's port 80. They should bear the label of tier=frontend and app-nginx. The deployment should be named nginx-deployment. Leave a copy of the yaml in your home directory with the name nginx-deployment.yaml.

create a deployment yaml file

user@arshadalisyed1:~$ cat nginx-deployment-exam.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment-exam
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
        tier: frontend
    spec:
      containers:
      - name: nginx-deployment-exam
        image: nginx
        ports:
        - containerPort: 80
user@arshadalisyed1:~$


results : 

user@arshadalisyed1:~$ kubectl get replicasets | grep exam
nginx-deployment-exam-77b8bbfd86   2         2         2         4m
user@arshadalisyed1:~$

user@arshadalisyed1:~$ kubectl get pods | grep deployment-exam
nginx-deployment-exam-77b8bbfd86-7ppvz   1/1       Running            0          4m
nginx-deployment-exam-77b8bbfd86-n8q6v   1/1       Running            0          4m
user@arshadalisyed1:~$


4. Create a pod called "with-files" with an nginx image listening on port 80. The pod should attach to emptyDir storage, mounted to /tmp in the container. Connect to the pod and create a file with zero bytes in the /tmp directory called "linuxacademy.txt." Do not delete this pod. If you create other artifacts in the course working on this, you may delete them from your home directory or create a directory called "extras" in your home directory and move the files there.

 Solution : 

user@arshadalisyed1:~$ cat with-files-nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  name: with-files-exam
spec:
  containers:
    - name: with-files-exam
      image: nginx
      volumeMounts:
      - mountPath: /tmp
        name: temp-volume
  volumes:
    - name: temp-volume
      emptyDir: {}

user@arshadalisyed1:~$


user@arshadalisyed1:~$ kubectl exec -it with-files-exam /bin/bash
********************* Check a volume mounted on /tmp *********************
root@with-files-exam:/# df -H
Filesystem      Size  Used Avail Use% Mounted on
none             21G  4.7G   17G  23% /
tmpfs           1.1G     0  1.1G   0% /dev
tmpfs           1.1G     0  1.1G   0% /sys/fs/cgroup
/dev/xvda1       21G  4.7G   17G  23% /tmp
shm              68M     0   68M   0% /dev/shm
tmpfs           1.1G   13k  1.1G   1% /run/secrets/kubernetes.io/serviceaccount
tmpfs           1.1G     0  1.1G   0% /sys/firmware


5. Label the worker node of your cluster with rack=qa.
  
   a.  kubectl label node arshadalisyed4.mylabserver.com rack=qa
   b. check by command   kubect get nodes -l rack=qa
       user@arshadalisyed1:~$ kubectl get nodes -l rack=qa
NAME                             STATUS    ROLES     AGE       VERSION
arshadalisyed4.mylabserver.com   Ready     <none>    13d       v1.9.3
user@arshadalisyed1:~$


6. Create a file called counter.yaml in your home directory and paste the following yaml into it:

apiVersion: v1
kind: Pod
metadata:
  name: counter
spec:
  containers:
  - name: count
    image: busybox
    args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
Start this pod. Once its logs exceed a count of 20 (no need to be precise, any time after it has reached 20 is fine) save the logs into a file in your home directory called count.result.txt. Delete the pod.

 Solution :
  
   user@arshadalisyed1:~$ kubectl logs counter-exam >count.result.txt

 

7. Create a deployment with two replicas of nginx:1.7.9. The container listens on port 80. It should be named "web-dep" and be labeled with tier=frontend with an annotation of AppVersion=3.4. The containers must be running with the UID of 1000.

  Solution : 
    apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-dep
  annotations:
    AppVersion: "3.4"
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
        tier: frontend
    spec:
      securityContext:
        runAsUser: 1000
      containers:
        - name : nginx
          image: nginx:1.7.9
          ports:
          - containerPort: 80
          command: ["sleep","1000"]

   user@arshadalisyed1:~$ kubectl  get pods | grep web-dep
web-dep-668bc96f6-8t5gp                  1/1       Running    0          4m
web-dep-668bc96f6-tcc4t                  1/1       Running    0          4m
user@arshadalisyed1:~$
 
 
 8. Upgrade the image in use by the web-dep deployment to nginx:1.9
       
         kubectl set image deployment web-dep nginx=1.9
         
9. Roll the image in use by the web-dep deployment to the previous version. Do not set the version number of the image explicitly for this command.
   kubectl rollout undo deployment web-dep
   
10. Scale the number of replicas of the web-dep deployment up to 3.
    kubectl scale deployment web-dep --replicas=3 
    
 11. Expose the web-dep deployment as a service using a NodePort.
      kubectl expose deployment web-dep --type=NodePort --port=80
       try----> curl  http://localhost:30174   shoulld get nginx page
       
 12. Configure a DaemonSet to run the image k8s.gcr.io/pause:2.0 in the cluster.
 
      apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: zuul
spec:
  selector:
    matchLabels:
      quiet: "pod"
  template:
    metadata:
      labels:
        quiet: pod
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: gozer
        image: k8s.gcr.io/pause:2.0
        
        user@arshadalisyed1:~$ kubectl get ds | grep dae
daemonset-exam   3         3         2         3            2           <none>          52s
user@arshadalisyed1:~$



13. Configure the cluster to use 8.8.8.8 and 8.8.4.4 as upstream DNS servers.

    apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  upstreamNameservers: |
    ["8.8.8.8", "8.8.4.4"]
    
    chec by running :    kubectl get configmap kube-dns -n kube-system -oyaml
    
    
    
14. A legacy application (yaml below) requires that the IP address or host name of the web-dep endpoint be configured as an environment variable called "FROBOZZ" in the container. Alter the yaml accordingly, leave a copy in your home directory with the name zork.yaml, and start the pod.

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: zork
  namespace: default
spec:
  selector:
    matchLabels:
      app: zork-app
  template:
    metadata:
      labels:
        app:zork-app
    spec:
      containers:
      - name: p114
        image: k8s.gcr.io/pause:2.0
        
        
        
        Solution : 
        
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: zork
  namespace: default
spec:
  selector:
    matchLabels:
      app: zork-app
  template:
    metadata:
      labels:
        app:zork-app
    spec:
      containers:
      - name: p114
        image: k8s.gcr.io/pause:2.0
        env:
        - name: FROBOZZ
          value: "web-dep.default"
 
 15. Create a pod using the k8s.gcr.io/pause:20 container image that is allowed to run on the master node if necessary, but does not have to be scheduled there.
 
 
   Solution : 
     
     user@arshadalisyed1:~$ cat sched.yaml
apiVersion: v1
kind: Pod
metadata:
  name: schedule-pod
spec:
  tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  containers:
  - name: schedule-pod
    image: k8s.gcr.io/pause:20

user@arshadalisyed1:~$


16. . Copy all Kubernetes Scheduler logs into a logs directory in your home directory.
    
 solution : 
       The Kubernetes logs are located in /var/log/pods/
      
      

17. Run the pod below until the counter in its stdout exceeds 20 (no need to be precise) and then extract the legacy log file to the logs directory in your home directory. Delete the pod.

apiVersion: v1
kind: Pod
metadata:
  name: counter2
spec:
  containers:
  - name: count
    image: busybox
    args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; echo "$(date) - File - $i" >> /var/www/countlog; i=$((i+1)); sleep 3; done']
    
ANS: kubtctl exec -it counter2 -- cat /var/www/countlog > ~/home/logs/countlog 

 
18. Build a default network policy that disallows all traffic to pods in the default namespace.
    
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  
  19. Remove the taint from the master node so it can now accept any work -- even from nodes with no tolerations of the master node.
  
      kubectl taint node master-node-name node-role.kubernetes.io/master-  
  
  
  20. Create a yaml file for a secret called my-secret and saved in a file in your home directory called my-secret.yaml. The secret should have two fields: a username and password. The username should be set to "admin" and the password should be set to "iHeartKittens"
    
    apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: YWRtaW4=
  password: aUhlYXJ0S2l0dGVucw==
    
    
  


     
     
     
     
     
          

    

 
      
